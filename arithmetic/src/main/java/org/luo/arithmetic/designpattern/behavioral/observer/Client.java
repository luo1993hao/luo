package org.luo.arithmetic.designpattern.behavioral.observer;

/**
 * 定义：
 * 　　观察者模式定义了一种一对多的依赖关系，
 * 让多个观察者对象同时监听某一个主题对象。
 * 这个主题对象在状态上发生变化时，会通知所有观察者对象，使它们能够自动更新自己。
 * 场景：
 * <p>
 * 类：
 * 抽象主题(Subject)角色：抽象主题角色把所有对观察者对象的引用保存在一个聚集（比如ArrayList对象）里，每个主题都可以有任何数量的观察者。抽象主题提供一个接口，可以增加和删除观察者对象，
 * 抽象主题角色又叫做抽象被观察者(Observable)角色。
 * 具体主题(ConcreteSubject)角色：将有关状态存入具体观察者对象；在具体主题的内部状态改变时，给所有登记过的观察者发出通知。具体主题角色又叫做具体被观察者(Concrete Observable)角色。
 * 抽象观察者(Observer)角色：为所有的具体观察者定义一个接口，在得到主题的通知时更新自己，这个接口叫做更新接口。
 * 具体观察者(ConcreteObserver)角色：存储与主题的状态自恰的状态。具体观察者角色实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题的状态 像协调。如果需要，具体观察者角色可以保持一个指向具体主题对象的引用。
 * 优点：
 * 1.降低了目标与观察者之间的耦合关系，两者之间是抽象耦合关系。符合依赖倒置原则。
 * 2.目标与观察者之间建立了一套触发机制。
 * 缺点：
 * 1.目标与观察者之间的依赖关系并没有完全解除，而且有可能出现循环引用。
 * 源码中的使用：
 * 1.jdk中Observable 类以及 Observer 接口（java9已废弃，猜测原因：1.保存被观察者列表使用的是vector（性能差）2.具体被观察者使用的是类而不是接口，扩展难 3.通知观察者使用的是倒叙）
 * 2.Spring中的事件编程模型
 * 个人理解：
 * 个人感觉观察者模式的核心思想就是在观察者与被观察者之间建立一种触发机制。
 * 学习观察者模式最好的好处还是在阅读源码的时候，
 * 当你在阅读某个源码发现xxxListener的时候，十之八九就使用了观察者模式。
 * 跟回调函数类似（个人感觉）。
 * 而我们那4个类也只是一种示范而不是标准。。例如在spring的实现中就并不是完全按照这4个类来执行（许多源码里的设计模式亦是如此）。
 * 由于spring已经为我们提供了现成的模型。我们日常开发中如果有需要使用的场景，也不会自己去写一套观察者模式的代码。
 */
public class Client {
    public static void main(String[] args) {
        Subject sub = new ConcreteSubject();
        sub.addObserver(new ConcreteObserver1()); //添加观察者1
        sub.addObserver(new ConcreteObserver2()); //添加观察者2
        sub.doSomething();
    }
}
